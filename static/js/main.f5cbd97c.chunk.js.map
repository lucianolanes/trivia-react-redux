{"version":3,"sources":["img/loading.png","img/purple-rain.gif","img/error.png","img/trivia.png","img/gold.png","img/silver.png","img/bronze.png","sound/purple_rain.mp3","sound/purple_rain_lyrics.vtt","redux/reducers/user.js","redux/actions/actionTypes.js","redux/reducers/trivia.js","redux/reducers/config.js","redux/reducers/index.js","redux/store/index.js","redux/actions/index.js","components/Button.js","components/Loading/index.js","pages/Settings.js","pages/Error404.js","components/TriviaHeader/index.js","pages/Feedback.js","pages/Login.js","pages/Ranking.js","components/Cronometer.js","components/NextButton.js","components/Question/index.js","pages/Trivia.js","components/TriviaFooter/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_STATE","name","email","picture","user","state","action","type","info","score","assertions","question","qnNum","answered","questions","isLoading","error","message","redirect","answerTime","trivia","payload","categories","catLoading","category","difficulty","config","rootReducer","combineReducers","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","window","Cypress","getTriviaQuestions","getFetchError","fetchCategories","dispatch","a","async","fetch","response","json","triviaCategories","trivia_categories","fetchToken","token","localStorage","setItem","updateScore","updateQuestion","ButtonHome","this","props","text","testId","linkTo","className","onClick","to","data-testid","React","Component","defaultProps","Loading","src","loadingGif","alt","difficulties","Easy","Medium","Hard","types","Settings","changeHandler","bind","clickBtn","makeCategoriesObj","makeSelect","setInitialState","setState","updateConfigs","id","value","array","Object","entries","sort","b","onChange","target","required","map","entry","key","htmlFor","obj","reduce","acc","Button","connect","updateConfig","Error404","purpleRain","TriviaHeader","Feedback","setQuestion","setScoreAndAssertions","makeRank","removeItem","resetQuestions","rankList","getItem","JSON","parse","newPlayer","scA","stringify","player","renderFeedbackMessage","mapDispatchToProps","Login","disableBtn","destiny","btnClick","btnStats","handleChange","disable","getCategories","getPlayer","getQuestions","location","href","md5","toString","gravatarEmail","inputProperties","testid","func","bool","disabled","createInput","logo","createBtn","getPlayerInfo","apiMessage","0","results","1","2","3","4","URL_QUESTIONS","responseCode","response_code","fetchQuestions","Ranking","ranking","getRank","renderRank","returnClick","update","index","gold","silver","bronze","Cronometer","timer","timerID","updateAfterTimeOut","setInterval","setTimerID","_prevProps","setTime","setAnswerTime","clearInterval","prevState","NextButton","handleClick","Question","random","setRandom","incorrectAnswers","qnObj","incorrect_answers","ARRAY_LENGTH","length","Math","floor","correctAnswer","correct_answer","arrayAnswers","answer","createAnswer","atob","correct","splice","uuidv4","addPoints","newScore","pointsCalculator","newAssertions","newState","hard","medium","easy","callback","shuffleAnswers","Trivia","App","document","querySelector","volume","exact","path","component","pages","controls","autoPlay","loop","default","kind","srcLang","purpleRainLyrics","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5cbd97c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.f89c84a7.png\";","module.exports = __webpack_public_path__ + \"static/media/purple-rain.1ae81289.gif\";","module.exports = __webpack_public_path__ + \"static/media/error.c922d44e.png\";","module.exports = __webpack_public_path__ + \"static/media/trivia.5ca37e73.png\";","module.exports = __webpack_public_path__ + \"static/media/gold.6c75b9d2.png\";","module.exports = __webpack_public_path__ + \"static/media/silver.3178060b.png\";","module.exports = __webpack_public_path__ + \"static/media/bronze.c9c50958.png\";","module.exports = __webpack_public_path__ + \"static/media/purple_rain.385d34f6.mp3\";","module.exports = __webpack_public_path__ + \"static/media/purple_rain_lyrics.74cafa2e.vtt\";","import * as types from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  name: '',\n  email: '',\n  picture: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.GET_PLAYER_INFO:\n    return { ...state, ...action.info };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","export const REQUEST_TRIVIA_QUESTIONS = 'REQUEST_TRIVIA_QUESTIONS';\nexport const GET_TRIVIA_QUESTIONS = 'GET_TRIVIA_QUESTIONS';\n\nexport const GET_PLAYER_INFO = 'GET_PLAYER_INFO';\n\nexport const GET_FETCH_ERROR = 'GET_FETCH_ERROR';\n\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const UPDATE_QUESTION = 'UPDATE_QUESTION';\nexport const SET_ANSWER_TIME = 'SET_ANSWER_TIME';\n\nexport const REQUEST_CATEGORIES = 'REQUEST_CATEGORIES';\nexport const GET_CATEGORIES = 'GET_CATEGORIES';\nexport const UPDATE_CONFIG = 'UPDATE_CONFIG';\n","import * as types from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  score: 0,\n  assertions: 0,\n  question: {\n    qnNum: 0,\n    answered: false,\n  },\n  questions: [],\n  isLoading: false,\n  error: {\n    message: '',\n    redirect: false,\n  },\n  answerTime: 30,\n};\n\nconst trivia = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.REQUEST_TRIVIA_QUESTIONS:\n    return { ...state, isLoading: true };\n  case types.GET_TRIVIA_QUESTIONS:\n    return { ...state, questions: action.questions, isLoading: false };\n  case types.GET_FETCH_ERROR:\n    return {\n      ...state,\n      error: { message: action.error, redirect: true },\n      isLoading: false,\n    };\n  case types.UPDATE_SCORE:\n    return { ...state, ...action.payload };\n  case types.UPDATE_QUESTION:\n    return { ...state, ...action.payload };\n  case types.SET_ANSWER_TIME:\n    return { ...state, ...action.payload };\n  default:\n    return state;\n  }\n};\n\nexport default trivia;\n","import * as types from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  categories: [],\n  catLoading: false,\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst config = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.REQUEST_CATEGORIES:\n    return { ...state, catLoading: true };\n  case types.GET_CATEGORIES:\n    return { ...state, categories: action.categories, catLoading: false };\n  case types.UPDATE_CONFIG:\n    return { ...state, ...action.config };\n  default:\n    return state;\n  }\n};\n\nexport default config;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport trivia from './trivia';\nimport config from './config';\n\nconst rootReducer = combineReducers({ user, trivia, config });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import * as types from './actionTypes';\n\n// Página de LOGIN\nexport const getPlayerInfo = (info) => ({ type: types.GET_PLAYER_INFO, info });\n\n// Bloco de funções auxiliares para os fetch's\nconst requestCategories = () => ({ type: types.REQUEST_CATEGORIES });\n\nconst requestTriviaQuestions = () => ({ type: types.REQUEST_TRIVIA_QUESTIONS });\n\nexport const getCategories = (categories) => ({\n  type: types.GET_CATEGORIES,\n  categories,\n});\n\nexport const getTriviaQuestions = (questions) => ({\n  type: types.GET_TRIVIA_QUESTIONS,\n  questions,\n});\n\nconst getFetchError = (error) => ({ type: types.GET_FETCH_ERROR, error });\n\n// Fetch Categories\nexport const fetchCategories = async (dispatch) => {\n  const URL_CATEGORIES = 'https://opentdb.com/api_category.php';\n  try {\n    dispatch(requestCategories());\n    const response = await fetch(URL_CATEGORIES);\n    const { trivia_categories: triviaCategories } = await response.json();\n    dispatch(getCategories(triviaCategories));\n  } catch (error) {\n    dispatch(getFetchError(`Erro em buscar categorias: ${error}`));\n  }\n};\n\n// Fetch Token\nconst fetchToken = async (dispatch) => {\n  const URL_TOKEN = 'https://opentdb.com/api_token.php?command=request';\n  try {\n    const response = await fetch(URL_TOKEN);\n    const { token } = await response.json();\n    localStorage.setItem('token', token);\n    return token;\n  } catch (error) {\n    dispatch(getFetchError(`Erro de token: ${error}`));\n  }\n};\n\n// Fetch Questions\nexport const fetchQuestions = (config) => async (dispatch) => {\n  const { category, difficulty, type } = config;\n  const apiMessage = {\n    0: (results) => getTriviaQuestions(results),\n    1: () => getFetchError('No Results Could not return results.'),\n    2: () => getFetchError('Invalid Parameter Contains an invalid parameter.'),\n    3: () => getFetchError('Token Not Found Session Token does not exist.'),\n    4: () => getFetchError('Token Empty Session.'),\n  };\n  dispatch(requestTriviaQuestions());\n  const token = await fetchToken(dispatch);\n  const URL_QUESTIONS = `https://opentdb.com/api.php?amount=5&category=${category}`\n  + `&difficulty=${difficulty}&type=${type}&encode=base64&token=${token}`;\n  try {\n    const response = await fetch(URL_QUESTIONS);\n    const { response_code: responseCode, results } = await response.json();\n    dispatch(apiMessage[responseCode](results));\n  } catch (error) {\n    dispatch(getFetchError(`Erro do servidor de perguntas: ${error}`));\n  }\n};\n\n// Atualiza a pontuação\nexport const updateScore = (payload) => ({ type: types.UPDATE_SCORE, payload });\n\n// Atualiza a questão\nexport const updateQuestion = (payload) => ({ type: types.UPDATE_QUESTION, payload });\n\n// Atualiza o tempo de resposta\nexport const setAnswerTime = (payload) => ({ type: types.SET_ANSWER_TIME, payload });\n\n// Atualiza configuração\nexport const updateConfig = (config) => ({ type: types.UPDATE_CONFIG, config });\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass ButtonHome extends React.Component {\n  render() {\n    const { text, testId = '', linkTo, className, onClick = null } = this.props;\n    return (\n      <Link to={ linkTo }>\n        <button\n          type=\"button\"\n          className={ className }\n          data-testid={ testId }\n          onClick={ onClick }\n        >\n          { text }\n        </button>\n      </Link>\n    );\n  }\n}\n\nButtonHome.propTypes = {\n  text: PropTypes.string.isRequired,\n  testId: PropTypes.string,\n  linkTo: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nButtonHome.defaultProps = {\n  testId: '',\n  onClick: null,\n};\n\nexport default ButtonHome;\n","import React from 'react';\nimport loadingGif from '../../img/loading.png';\nimport './style.css';\n\nclass Loading extends React.Component {\n  render() {\n    return (\n      <div className=\"loadingContainer\">\n        <h3 className=\"loading\">Loading...</h3>\n        <img className=\"loadingGif\" src={ loadingGif } alt=\"loading\" />\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateConfig } from '../redux/actions';\nimport Button from '../components/Button';\nimport Loading from '../components/Loading';\n\nconst difficulties = { '': '', Easy: 'easy', Medium: 'medium', Hard: 'hard' };\nconst types = { '': '', 'Multipe Choise': 'multipe', 'True / False': 'boolean' };\n\nclass Settings extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      category: '',\n      difficulty: '',\n      type: '',\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n    this.clickBtn = this.clickBtn.bind(this);\n    this.makeCategoriesObj = this.makeCategoriesObj.bind(this);\n    this.makeSelect = this.makeSelect.bind(this);\n    this.setInitialState = this.setInitialState.bind(this);\n  }\n\n  componentDidMount() {\n    this.setInitialState();\n  }\n\n  setInitialState() {\n    const { category, difficulty, type } = this.props;\n    this.setState({ category, difficulty, type });\n  }\n\n  clickBtn() {\n    const { category, difficulty, type } = this.state;\n    const { updateConfigs } = this.props;\n    updateConfigs({ category, difficulty, type });\n  }\n\n  changeHandler({ id, value }) {\n    this.setState({ [id]: value });\n  }\n\n  makeSelect(text, id, value, info) {\n    const array = (id === 'category') ? Object.entries(info).sort((a, b) => a[1] - b[1])\n      : Object.entries(info);\n    return (\n      <div className=\"select\">\n        <select\n          id={ id }\n          onChange={ ({ target }) => this.changeHandler(target) }\n          value={ value }\n          className=\"select-text\"\n          required\n        >\n          { array.map((entry) => (\n            <option key={ entry[1] } value={ entry[1] }>{ entry[0] }</option>\n          ))}\n        </select>\n        <span className=\"select-highlight\" />\n        <span className=\"select-bar\" />\n        <label htmlFor={ id } className=\"select-label\">\n          { text }\n        </label>\n      </div>\n    );\n  }\n\n  makeCategoriesObj() {\n    const { categories } = this.props;\n    const obj = categories.reduce((acc, { id, name }) => ({ ...acc, [name]: id }), {});\n    return { ...obj, '': '' };\n  }\n\n  render() {\n    const { category, difficulty, type } = this.state;\n    const { catLoading } = this.props;\n    const { makeSelect, makeCategoriesObj, clickBtn } = this;\n    if (catLoading) return <Loading />;\n    return (\n      <div className=\"settingsPage\">\n        <div className=\"settingsContainer\">\n          { makeSelect('Difficulty', 'difficulty', difficulty, difficulties) }\n          { makeSelect('Type', 'type', type, types) }\n          { makeSelect('Category', 'category', category, makeCategoriesObj()) }\n          <h2 data-testid=\"settings-title\">You can&apos;t seem to make up your mind</h2>\n          <h2>I think you better close it.</h2>\n          <Button\n            text=\"GUIDE ME TO THE PURPLE RAIN\"\n            linkTo=\"/\"\n            className=\"guide-me-btn\"\n            onClick={ clickBtn }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  categories: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  catLoading: PropTypes.bool.isRequired,\n  updateConfigs: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ ...state.config });\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateConfigs: (config) => dispatch(updateConfig(config)),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import React from 'react';\nimport purpleRain from '../img/purple-rain.gif';\nimport error from '../img/error.png';\n\nclass Error404 extends React.Component {\n  render() {\n    return (\n      <div className=\"errorContainer\">\n        <img className=\"errorPic\" src={ error } alt=\"Error\" />\n        <h2>I never meant to cause you any sorrow...</h2>\n        <img className=\"princeGif\" src={ purpleRain } alt=\"Prince Gif\" />\n      </div>\n    );\n  }\n}\n\nexport default Error404;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './style.css';\n\nclass TriviaHeader extends React.Component {\n  render() {\n    const { name, picture, score } = this.props;\n    return (\n      <header className=\"header-trivia\">\n        <img\n          className=\"profile-picture\"\n          src={ picture }\n          alt={ name }\n          data-testid=\"header-profile-picture\"\n        />\n        <p className=\"player-name\">\n          Player:\n          <span data-testid=\"header-player-name\">{name}</span>\n        </p>\n        <p className=\"player-score\">\n          Score:\n          <span data-testid=\"header-score\">{ score }</span>\n        </p>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ ...state.user, ...state.trivia });\n\nTriviaHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(TriviaHeader);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from '../components/Button';\nimport TriviaHeader from '../components/TriviaHeader';\nimport { updateQuestion, getTriviaQuestions } from '../redux/actions';\n\nclass Feedback extends React.Component {\n  componentDidMount() {\n    const { updateQuestion: setQuestion } = this.props;\n    setQuestion({ question: { qnNum: 0, answered: false } });\n    this.setScoreAndAssertions();\n    this.makeRank();\n  }\n\n  componentWillUnmount() {\n    localStorage.removeItem('state');\n  }\n\n  setScoreAndAssertions() {\n    const { getTriviaQuestions: resetQuestions } = this.props;\n    resetQuestions([]);\n  }\n\n  makeRank() {\n    const { user: { name, picture }, trivia: { score } } = this.props;\n    let rankList = localStorage.getItem('ranking')\n      ? JSON.parse(localStorage.getItem('ranking')) : [];\n    const newPlayer = { name, score, picture };\n    rankList = [...rankList, newPlayer]\n      .sort(({ score: scA }, { score: scB }) => scB - scA);\n    localStorage.setItem('ranking', JSON.stringify(rankList));\n  }\n\n  renderFeedbackMessage() {\n    const { player: { assertions } } = JSON.parse(localStorage.getItem('state'));\n    const hit = 3;\n    if (assertions >= hit) {\n      return (\n        <>\n          <h3 data-testid=\"feedback-text\" className=\"hidden\">Mandou bem!</h3>\n          <h3>Well done!</h3>\n        </>\n      );\n    }\n    return (\n      <>\n        <h3 data-testid=\"feedback-text\" className=\"hidden\">Podia ser melhor...</h3>\n        <h3>You can do better...</h3>\n      </>\n    );\n  }\n\n  render() {\n    const { player: { score, assertions } } = JSON.parse(localStorage.getItem('state'));\n    return (\n      <>\n        <TriviaHeader />\n        <section className=\"feedback-container\">\n          {this.renderFeedbackMessage()}\n          <p>\n            You were right in\n            <span data-testid=\"feedback-total-question\">{ ` ${assertions} ` }</span>\n            { assertions !== 1 ? 'questions,' : 'question,' }\n          </p>\n          <p>\n            scoring a total of\n            <span data-testid=\"feedback-total-score\">{ ` ${score} ` }</span>\n            points!\n          </p>\n          <div id=\"buttonHome\">\n            <Button\n              testId=\"btn-play-again\"\n              text=\"PLAY AGAIN\"\n              linkTo=\"/\"\n              className=\"btn-feedback\"\n            />\n          </div>\n          <div id=\"buttonRanking\">\n            <Button\n              testId=\"btn-ranking\"\n              text=\"RANKING\"\n              linkTo=\"/ranking\"\n              className=\"btn-feedback\"\n            />\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  trivia: state.trivia,\n});\n\nconst mapDispatchToProps = ({ updateQuestion, getTriviaQuestions });\n\nFeedback.propTypes = {\n  updateQuestion: PropTypes.func.isRequired,\n  getTriviaQuestions: PropTypes.func.isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  trivia: PropTypes.shape({\n    score: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\nimport PropTypes from 'prop-types';\nimport { fetchCategories, fetchQuestions, getPlayerInfo } from '../redux/actions';\nimport logo from '../img/trivia.png';\n\nconst URL_GRAVATAR = 'https://www.gravatar.com/avatar/';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      disableBtn: true,\n      destiny: null,\n    };\n    this.btnClick = this.btnClick.bind(this);\n    this.btnStats = this.btnStats.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange({ target: { id, value } }) {\n    this.setState({ [id]: value }, this.btnStats);\n  }\n\n  btnStats() {\n    const { name, email, disableBtn } = this.state;\n    const disable = (name === '') || (email === '');\n    if (disableBtn !== disable) this.setState({ disableBtn: disable });\n  }\n\n  btnClick(destiny) {\n    const { getCategories, getPlayer, getQuestions, category, difficulty,\n      type } = this.props;\n    if (destiny === '/trivia') {\n      const { name, email } = this.state;\n      if (name === 'Prince Rogers Nelson') {\n        /* Source: https://reactgo.com/react-redirect-to-external-url/ */\n        window.location.href = 'https://www.youtube.com/watch?v=TvnYmWpD_T8';\n        return;\n      }\n      const picture = URL_GRAVATAR + md5(email).toString();\n      const state = JSON.stringify({\n        player: { name, assertions: 0, score: 0, gravatarEmail: email } });\n      localStorage.setItem('state', state);\n      getPlayer({ name, email, picture });\n      getQuestions({ category, difficulty, type });\n    } else { getCategories(); }\n    this.setState({ destiny });\n  }\n\n  createInput(inputProperties) {\n    const [type, id, value, text, testid, className, func] = inputProperties;\n    return (\n      <label htmlFor={ id }>\n        { text }\n        <input\n          type={ type }\n          id={ id }\n          value={ value }\n          data-testid={ testid }\n          className={ className }\n          onChange={ func }\n        />\n      </label>\n    );\n  }\n\n  createBtn(inputProperties) {\n    const [text, testid, bool, destiny, func] = inputProperties;\n    return (\n      <button\n        type=\"button\"\n        data-testid={ testid }\n        className={ testid }\n        disabled={ bool }\n        onClick={ () => func(destiny) }\n      >\n        { text }\n      </button>\n    );\n  }\n\n  render() {\n    const { createInput, handleChange, btnClick } = this;\n    const { name, email, disableBtn, destiny } = this.state;\n    return (\n      <div className=\"App\">\n        { destiny && <Redirect to={ destiny } />}\n        <header className=\"App-header\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <div className=\"loginContainer\">\n            {createInput(['text', 'name', name, 'Name:',\n              'input-player-name', 'form__field', handleChange])}\n            {createInput(['text', 'email', email, 'E-mail:', 'input-gravatar-email',\n              'form__field', handleChange])}\n            {this.createBtn(['PLAY', 'btn-play', disableBtn, '/trivia', btnClick])}\n            {this.createBtn(['SETTINGS', 'btn-settings', false, '/settings',\n              btnClick])}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  getCategories: PropTypes.func.isRequired,\n  getPlayer: PropTypes.func.isRequired,\n  getQuestions: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({ ...state.config });\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCategories: () => dispatch(fetchCategories),\n  getPlayer: (info) => dispatch(getPlayerInfo(info)),\n  getQuestions: (config) => dispatch(fetchQuestions(config)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport { updateScore } from '../redux/actions';\nimport gold from '../img/gold.png';\nimport silver from '../img/silver.png';\nimport bronze from '../img/bronze.png';\n\nclass Ranking extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      ranking: [],\n      redirect: false,\n    };\n    this.getRank = this.getRank.bind(this);\n    this.renderRank = this.renderRank.bind(this);\n    this.returnClick = this.returnClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.getRank();\n  }\n\n  componentWillUnmount() {\n    const { updateScore: update } = this.props;\n    update({ score: 0, assertions: 0 });\n  }\n\n  getRank() {\n    this.setState({\n      ranking: JSON.parse(localStorage.getItem('ranking')),\n    });\n  }\n\n  returnClick() { this.setState({ redirect: true }); }\n\n  renderRank() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"playerCard\">\n        { ranking.map(({ name, score, picture }, index) => (\n          <div key={ `trophy-${index}` } className=\"ranking-position-container\">\n            <div className=\"trophy-container\">\n              { index === 0 && <img src={ gold } alt=\"gold\" className=\"trophy\" /> }\n              { index === 1 && <img src={ silver } alt=\"silver\" className=\"trophy\" /> }\n              { index === 2 && <img src={ bronze } alt=\"bronze\" className=\"trophy\" /> }\n            </div>\n            <div key={ index } className=\"ranking-position\">\n              <div className=\"picture-and-rank\">\n                <span>\n                  {index + 1}\n                  º\n                </span>\n                <img src={ picture } alt={ `player-rank-${index}` } />\n              </div>\n              <p data-testid={ `player-name-${index}` }>\n                { name }\n              </p>\n              <p data-testid={ `player-score-${index}` }>\n                { score }\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    const { redirect } = this.state;\n\n    return (\n      <section className=\"ranking-container\">\n        { redirect && <Redirect to=\"/\" /> }\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          onClick={ this.returnClick }\n          className=\"btn-ranking\"\n        >\n          PLAY AGAIN\n        </button>\n        <div>\n          { this.renderRank() }\n        </div>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  trivia: state.trivia,\n});\n\nconst mapDispatchToProps = ({ updateScore });\n\nRanking.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  trivia: PropTypes.shape({\n    score: PropTypes.number.isRequired,\n  }).isRequired,\n  updateScore: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { updateQuestion, setAnswerTime } from '../redux/actions';\n\nconst THIRTY_SEC = 30;\n\nclass Cronometer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      timer: THIRTY_SEC,\n      timerID: null,\n    };\n\n    this.updateAfterTimeOut = this.updateAfterTimeOut.bind(this);\n  }\n\n  componentDidMount() {\n    const ONE_SEC = 1000;\n\n    const timerID = setInterval(\n      () => this.setState(({ timer }) => ({ timer: timer - 1 })),\n      ONE_SEC,\n    );\n\n    this.setTimerID(timerID);\n  }\n\n  componentDidUpdate(_prevProps, { timer, timerID }) {\n    const { question: { answered }, setAnswerTime: setTime } = this.props;\n    setTime({ answerTime: (timer === THIRTY_SEC) ? THIRTY_SEC : (timer - 1) });\n    if (answered) { clearInterval(timerID); return; }\n    if (timer === 0) { this.updateAfterTimeOut(); }\n  }\n\n  setTimerID(timerID) {\n    this.setState((prevState) => ({ ...prevState, timerID }));\n  }\n\n  updateAfterTimeOut() {\n    const { updateQuestion: update, question: { qnNum } } = this.props;\n    update({ question: { answered: true, qnNum } });\n  }\n\n  render() {\n    const { timer } = this.state;\n    return (\n      <div className=\"timer\">\n        { timer }\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = { updateQuestion, setAnswerTime };\n\nconst mapStateToProps = (state) => ({ ...state.trivia });\n\nCronometer.propTypes = {\n  question: PropTypes.shape({\n    answered: PropTypes.bool.isRequired,\n    qnNum: PropTypes.number.isRequired,\n  }).isRequired,\n  updateQuestion: PropTypes.func.isRequired,\n  setAnswerTime: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cronometer);\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { updateQuestion } from '../redux/actions';\r\n\r\nclass NextButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick() {\r\n    const { qnNum, updateQuestion: update } = this.props;\r\n    const newQnNum = qnNum + 1;\r\n    update({ question: { answered: false, qnNum: newQnNum } });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        type=\"button\"\r\n        data-testid=\"btn-next\"\r\n        onClick={ this.handleClick }\r\n        className=\"next-btn\"\r\n      >\r\n        Next\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { updateQuestion };\r\n\r\nNextButton.propTypes = {\r\n  qnNum: PropTypes.number.isRequired,\r\n  updateQuestion: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(NextButton);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport { connect } from 'react-redux';\nimport { updateScore, updateQuestion } from '../../redux/actions';\nimport Cronometer from '../Cronometer';\nimport NextButton from '../NextButton';\nimport './style.css';\n\nconst correctText = 'correct-answer';\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      random: null,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.setRandom = this.setRandom.bind(this);\n  }\n\n  componentDidMount() {\n    this.setRandom();\n  }\n\n  setRandom() {\n    const { qnObj: { incorrect_answers: incorrectAnswers } } = this.props;\n    const { random } = this.state;\n    const ARRAY_LENGTH = incorrectAnswers.length + 1;\n    if (!random) this.setState({ random: Math.floor(Math.random() * ARRAY_LENGTH) });\n  }\n\n  shuffleAnswers() {\n    const {\n      qnObj: { correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers } } = this.props;\n    const { random } = this.state;\n    const arrayAnswers = incorrectAnswers\n      .map((answer, index) => (\n        this.createAnswer([atob(answer), `wrong-answer-${index}`, 'wrong-answer'])));\n    const correct = this.createAnswer(\n      [atob(correctAnswer), correctText, correctText],\n    );\n    arrayAnswers.splice(random, 0, correct);\n    return arrayAnswers;\n  }\n\n  createAnswer([answer, testid, className]) {\n    const { question: { answered } } = this.props;\n    return (\n      <button\n        key={ uuidv4() }\n        type=\"button\"\n        data-testid={ testid }\n        id={ testid }\n        className={ answered ? `${className} answer` : 'answer' }\n        disabled={ answered }\n        onClick={ this.handleClick }\n      >\n        { answer }\n      </button>\n    );\n  }\n\n  handleClick({ target: { id } }) {\n    const { updateQuestion: update,\n      question: { qnNum }, updateScore: addPoints } = this.props;\n    const payload = { question: { qnNum, answered: true } };\n    update(payload);\n    if (id === correctText) {\n      const state = JSON.parse(localStorage.getItem('state'));\n      const { player: { score, assertions } } = state;\n      const { answerTime } = this.props;\n      const newScore = score + this.pointsCalculator(answerTime);\n      const newAssertions = assertions + 1;\n      addPoints({ score: newScore, assertions: newAssertions });\n      const newState = {\n        player: { ...state.player, score: newScore, assertions: newAssertions } };\n      localStorage.setItem('state', JSON.stringify(newState));\n    }\n  }\n\n  pointsCalculator(answerTime) {\n    const { qnObj: { difficulty } } = this.props;\n    const diffConvertion = {\n      hard: 3,\n      medium: 2,\n      easy: 1,\n    };\n    const TEN = 10;\n    const score = TEN + (answerTime * diffConvertion[atob(difficulty)]);\n    return score;\n  }\n\n  /** Source: https://forums.pixeltailgames.com/t/encoding-issues-in-questions-answers/34751/2 */\n  render() {\n    const { qnObj: { category, question: text },\n      question: { answered, qnNum } } = this.props;\n    return (\n      <section className=\"question-container\">\n        <Cronometer callback={ this.pointsCalculator } />\n        <h4 data-testid=\"question-category\">{ atob(category) }</h4>\n        <p data-testid=\"question-text\">{ atob(text) }</p>\n        <section className=\"answers-container\">\n          { this.shuffleAnswers() }\n        </section>\n        { answered && <NextButton qnNum={ qnNum } /> }\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ ...state.trivia });\n\nconst mapDispatchToProps = { updateScore, updateQuestion };\n\nQuestion.propTypes = {\n  qnObj: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n    question: PropTypes.string.isRequired,\n    difficulty: PropTypes.string.isRequired,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string.isRequired)\n      .isRequired,\n    correct_answer: PropTypes.string.isRequired,\n  }).isRequired,\n  question: PropTypes.shape({\n    qnNum: PropTypes.number.isRequired,\n    answered: PropTypes.bool.isRequired,\n  }).isRequired,\n  answerTime: PropTypes.number.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  updateQuestion: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Question);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { TriviaHeader, Loading, Question } from '../components';\n\nclass Trivia extends React.Component {\n  render() {\n    const { questions, question: { qnNum } } = this.props;\n\n    if (questions.length === 0) return <Loading />;\n    if (qnNum >= questions.length) return <Redirect to=\"/feedback\" />;\n    return (\n      <section>\n        <TriviaHeader />\n        {/* Source: https://www.nikgraf.com/blog/using-reacts-key-attribute-to-remount-a-component */}\n        <Question key={ qnNum } qnObj={ questions[qnNum] } />\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({ ...state.user, ...state.trivia });\n\nTrivia.propTypes = {\n  questions: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  question: PropTypes.shape({\n    qnNum: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Trivia);\n","import React from 'react';\nimport './style.css';\n\nclass TriviaFooter extends React.Component {\n  render() {\n    return (\n      <footer className=\"footer-trivia\">\n        <span>Criado por Grupo 33 - Turma 12 - Trybe</span>\n      </footer>\n    );\n  }\n}\n\nexport default TriviaFooter;\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport * as pages from './pages';\nimport purpleRain from './sound/purple_rain.mp3';\nimport purpleRainLyrics from './sound/purple_rain_lyrics.vtt';\n// import { connect } from 'react-redux';\n// import { fetchQuestions } from './redux/actions';\nimport './App.css';\n\nclass App extends React.Component {\n  // constructor() {\n  //   super();\n  //   this.purpleRainMP3 = new Audio(purpleRain);\n  // }\n\n  // componentDidMount() {\n  //   this.purpleRainMP3.play();\n  //   this.purpleRainMP3.volume = 0.33;\n  //   this.purpleRainMP3.loop = true;\n  // }\n\n  componentDidMount() {\n    const audio = document.querySelector('audio');\n    audio.volume = 0.33;\n  }\n\n  render() {\n    return (\n      <>\n        <Switch>\n          <Route exact path=\"/\" component={ pages.Login } />\n          <Route path=\"/trivia\" component={ pages.Trivia } />\n          <Route path=\"/feedback\" component={ pages.Feedback } />\n          <Route path=\"/ranking\" component={ pages.Ranking } />\n          <Route path=\"/settings\" component={ pages.Settings } />\n          <Route path=\"*\" component={ pages.Error404 } />\n        </Switch>\n        <div className=\"music-container\">\n          <audio controls autoPlay loop className=\"music-player\">\n            <track\n              default\n              kind=\"captions\"\n              srcLang=\"en\"\n              src={ purpleRainLyrics }\n            />\n            <source src={ purpleRain } />\n          </audio>\n        </div>\n      </>\n    );\n  }\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   getQuestions: () => dispatch(fetchQuestions()),\n// });\n\n// export default connect(null, mapDispatchToProps)(App);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}